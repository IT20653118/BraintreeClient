import { Component, OnInit } from '@angular/core';
import { AppService } from './app.service';
import * as braintree from 'braintree-web';
import * as paypal from 'paypal-checkout-components';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {

  title = 'braintreeTutorialClient';

  constructor(private appservice: AppService) { }

  ngOnInit() {
    this.createBraintreeHostedFields();
  }

  createBraintreeHostedFields() {

    const submit = document.querySelector('button[type="submit"]') as HTMLInputElement;
    const form = document.querySelector('#hosted-fields-form');

    braintree.client.create({
      // Insert your tokenization key here
      authorization: 'sandbox_fwwnjrcr_dtf5v9sfp3p2jpwy'
    }, function (clientErr: any, clientInstance: any) {

      if (clientErr) {
        console.error(clientErr);
        return;
      }

      braintree.hostedFields.create({
        client: clientInstance,
        styles: {
          input: {
            // change input styles to match
            // bootstrap styles
            'font-size': '1rem',
            color: '#495057'
          }
        },
        // Configure which fields in your card form will be generated by Hosted Fields instead
        // The hosted fields that we will be using
        // NOTE : cardholder's name field is not available in the field options
        // and a separate input field has to be used incase you need it
        fields: {
          cardholderName: {
            selector: '#cc-name',
            placeholder: 'Name as it appears on your card'
          },
          number: {
            selector: '#cc-number',
            placeholder: '4111 1111 1111 1111',
            // supportedCardBrands: {
            //   visa: false, // prevents Visas from showing up as valid even when the Braintree control panel is configured to allow them
            //   'diners-club': true // allow Diners Club cards to be valid (processed as Discover cards on the Braintree backend)
            // }
          },
          cvv: {
            selector: '#cc-cvv',
            placeholder: '123'
          },
          expirationDate: {
            selector: '#cc-expiration',
            placeholder: 'MM / YY'
          }
        }
      }, function (hostedFieldsErr: any, hostedFieldsInstance: any) {
        if (hostedFieldsErr) {
          console.error(hostedFieldsErr);
          return;
        }
        function createInputChangeEventListener(element: any) {
          return function () {
            validateInput(element);
          }
        }

        function setValidityClasses(element: any, validity: any) {
          if (validity) {
            element.removeClass('is-invalid');
            element.addClass('is-valid');
          } else {
            element.addClass('is-invalid');
            element.removeClass('is-valid');
          }
        }

        function validateInput(element: any) {
          // very basic validation, if the
          // fields are empty, mark them
          // as invalid, if not, mark them
          // as valid

          if (!element.val().trim()) {
            setValidityClasses(element, false);

            return false;
          }

          setValidityClasses(element, true);

          return true;
        }

        function validateEmail() {
          let baseValidity = validateInput(email);

          if (!baseValidity) {
            return false;
          }

          // if (email.val()?.indexOf('@') === -1) {
          //   setValidityClasses(email, false);
          //   return false;
          // }

          setValidityClasses(email, true);
          return true;
        }

        let ccName = $('#cc-name');
        let email = $('#email');

        ccName.on('change', function () {
          validateInput(ccName);
        });
        email.on('change', validateEmail);


        hostedFieldsInstance.on('validityChange', function (event: any) {
          let field = event.fields[event.emittedBy];

          // Remove any previously applied error or warning classes
          $(field.container).removeClass('is-valid');
          $(field.container).removeClass('is-invalid');

          if (field.isValid) {
            $(field.container).addClass('is-valid');
          } else if (field.isPotentiallyValid) {
            // skip adding classes if the field is
            // not valid, but is potentially valid
          } else {
            $(field.container).addClass('is-invalid');
          }
        });

        hostedFieldsInstance.on('cardTypeChange', function (event: any) {
          let cardBrand = $('#card-brand');
          let cvvLabel = $('[for="cc-cvv"]');

          if (event.cards.length === 1) {
            let card = event.cards[0];

            // change pay button to specify the type of card
            // being used
            cardBrand.text(card.niceType);
            // update the security code label
            cvvLabel.text(card.code.name);
          } else {
            // reset to defaults
            cardBrand.text('Card');
            cvvLabel.text('CVV');
          }
        });

        // Once the fields are initialized enable the submit button
        submit?.removeAttribute('disabled');

        // Initialize the form submit event
        form?.addEventListener('submit', function (event) {
          event.preventDefault();
          // When the user clicks on the 'Submit payment' button this code will send the
          // encrypted payment information in a variable called a payment method nonce

          let formIsInvalid = false;
          let state = hostedFieldsInstance.getState();

          // perform validations on the non-Hosted Fields
          // inputs
          if (!validateEmail()) {
            formIsInvalid = true;
          }

          // Loop through the Hosted Fields and check
          // for validity, apply the is-invalid class
          // to the field container if invalid
          Object.keys(state.fields).forEach(function (field) {
            if (!state.fields[field].isValid) {
              $(state.fields[field].container).addClass('is-invalid');
              formIsInvalid = true;
            }
          });

          if (formIsInvalid) {
            // skip tokenization request if any fields are invalid
            return;
          }
          const amount = '10.00';
          hostedFieldsInstance.tokenize(function (tokenizeErr: any, payload: any) {
            console.log("payload information", payload);
            if (tokenizeErr) {
              console.error(tokenizeErr);
              console.log();
              return;
            }
            // This is where you would submit payload.nonce to your server
            (<any>$('.toast')).toast('show');

            $.ajax({
              type: 'POST',
              url: `http://localhost:8081/braintree/checkouts?amount=${amount}&payment_method_nonce=${payload.nonce}`,
              // data: { 'paymentMethodNonce': payload.nonce }
            }).done(function (result) {
              // Since the following code will overwrite the contents of
              // your page with a success or error message, first teardown
              // the Hosted Fields form to remove any extra event listeners
              // and iframes that the Braintree SDK added to your page
              hostedFieldsInstance.teardown(function (teardownErr: any) {
                if (teardownErr) {
                  console.error('Could not tear down the Hosted Fields form!');
                } else {
                  console.info('Hosted Fields form has been torn down!');
                  // Remove the 'Submit payment' button
                  // form.removeChild(submit);
                }
              });

              if (result.success) {
                $('#checkout-message').html('<h1>Success</h1><p>Your Hosted Fields form is working! Check your <a href="https://sandbox.braintreegateway.com/login">sandbox Control Panel</a> for your test transactions.</p><p>Refresh to try another transaction.</p>');
              } else {
                $('#checkout-message').html('<h1>Error</h1><p>Check your console.</p>');
              }
            });
          });
        }, false);
      });
    });
  }
}
